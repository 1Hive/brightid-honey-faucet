// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Settings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Settings entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Settings entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Settings", id.toString(), this);
  }

  static load(id: string): Settings | null {
    return store.get("Settings", id) as Settings | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get periodLength(): BigInt {
    let value = this.get("periodLength");
    return value.toBigInt();
  }

  set periodLength(value: BigInt) {
    this.set("periodLength", Value.fromBigInt(value));
  }

  get firstPeriodStart(): BigInt {
    let value = this.get("firstPeriodStart");
    return value.toBigInt();
  }

  set firstPeriodStart(value: BigInt) {
    this.set("firstPeriodStart", Value.fromBigInt(value));
  }

  get percentPerPeriod(): BigInt {
    let value = this.get("percentPerPeriod");
    return value.toBigInt();
  }

  set percentPerPeriod(value: BigInt) {
    this.set("percentPerPeriod", Value.fromBigInt(value));
  }

  get pctBase(): BigInt {
    let value = this.get("pctBase");
    return value.toBigInt();
  }

  set pctBase(value: BigInt) {
    this.set("pctBase", Value.fromBigInt(value));
  }

  get minimumEthBalance(): BigInt {
    let value = this.get("minimumEthBalance");
    return value.toBigInt();
  }

  set minimumEthBalance(value: BigInt) {
    this.set("minimumEthBalance", Value.fromBigInt(value));
  }
}

export class Claimer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claimer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claimer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claimer", id.toString(), this);
  }

  static load(id: string): Claimer | null {
    return store.get("Claimer", id) as Claimer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registeredForPeriod(): BigInt {
    let value = this.get("registeredForPeriod");
    return value.toBigInt();
  }

  set registeredForPeriod(value: BigInt) {
    this.set("registeredForPeriod", Value.fromBigInt(value));
  }

  get latestClaimPeriod(): BigInt {
    let value = this.get("latestClaimPeriod");
    return value.toBigInt();
  }

  set latestClaimPeriod(value: BigInt) {
    this.set("latestClaimPeriod", Value.fromBigInt(value));
  }

  get addressVoid(): boolean {
    let value = this.get("addressVoid");
    return value.toBoolean();
  }

  set addressVoid(value: boolean) {
    this.set("addressVoid", Value.fromBoolean(value));
  }

  get claims(): Array<string> {
    let value = this.get("claims");
    return value.toStringArray();
  }

  set claims(value: Array<string>) {
    this.set("claims", Value.fromStringArray(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claim", id.toString(), this);
  }

  static load(id: string): Claim | null {
    return store.get("Claim", id) as Claim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimer(): string {
    let value = this.get("claimer");
    return value.toString();
  }

  set claimer(value: string) {
    this.set("claimer", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class Period extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Period entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Period entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Period", id.toString(), this);
  }

  static load(id: string): Period | null {
    return store.get("Period", id) as Period | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalRegisteredUsers(): BigInt {
    let value = this.get("totalRegisteredUsers");
    return value.toBigInt();
  }

  set totalRegisteredUsers(value: BigInt) {
    this.set("totalRegisteredUsers", Value.fromBigInt(value));
  }

  get individualPayout(): BigInt {
    let value = this.get("individualPayout");
    return value.toBigInt();
  }

  set individualPayout(value: BigInt) {
    this.set("individualPayout", Value.fromBigInt(value));
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC20 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC20 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC20", id.toString(), this);
  }

  static load(id: string): ERC20 | null {
    return store.get("ERC20", id) as ERC20 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}
