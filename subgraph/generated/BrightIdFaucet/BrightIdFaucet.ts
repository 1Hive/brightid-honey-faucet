// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get periodNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Register extends ethereum.Event {
  get params(): Register__Params {
    return new Register__Params(this);
  }
}

export class Register__Params {
  _event: Register;

  constructor(event: Register) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get periodNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetBrightIdSettings extends ethereum.Event {
  get params(): SetBrightIdSettings__Params {
    return new SetBrightIdSettings__Params(this);
  }
}

export class SetBrightIdSettings__Params {
  _event: SetBrightIdSettings;

  constructor(event: SetBrightIdSettings) {
    this._event = event;
  }

  get brightIdContext(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get brightIdVerifier(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinimumEthBalance extends ethereum.Event {
  get params(): SetMinimumEthBalance__Params {
    return new SetMinimumEthBalance__Params(this);
  }
}

export class SetMinimumEthBalance__Params {
  _event: SetMinimumEthBalance;

  constructor(event: SetMinimumEthBalance) {
    this._event = event;
  }

  get miniumBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetPercentPerPeriod extends ethereum.Event {
  get params(): SetPercentPerPeriod__Params {
    return new SetPercentPerPeriod__Params(this);
  }
}

export class SetPercentPerPeriod__Params {
  _event: SetPercentPerPeriod;

  constructor(event: SetPercentPerPeriod) {
    this._event = event;
  }

  get percentPerPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetUniswapExchange extends ethereum.Event {
  get params(): SetUniswapExchange__Params {
    return new SetUniswapExchange__Params(this);
  }
}

export class SetUniswapExchange__Params {
  _event: SetUniswapExchange;

  constructor(event: SetUniswapExchange) {
    this._event = event;
  }

  get uniswapExchange(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BrightIdFaucet__claimersResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class BrightIdFaucet__periodsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BrightIdFaucet extends ethereum.SmartContract {
  static bind(address: Address): BrightIdFaucet {
    return new BrightIdFaucet("BrightIdFaucet", address);
  }

  ONE_HUNDRED_PERCENT(): BigInt {
    let result = super.call(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_HUNDRED_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNISWAP_DEADLINE_PERIOD(): BigInt {
    let result = super.call(
      "UNISWAP_DEADLINE_PERIOD",
      "UNISWAP_DEADLINE_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_UNISWAP_DEADLINE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UNISWAP_DEADLINE_PERIOD",
      "UNISWAP_DEADLINE_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  brightIdContext(): Bytes {
    let result = super.call(
      "brightIdContext",
      "brightIdContext():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_brightIdContext(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "brightIdContext",
      "brightIdContext():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  brightIdVerifier(): Address {
    let result = super.call(
      "brightIdVerifier",
      "brightIdVerifier():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_brightIdVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "brightIdVerifier",
      "brightIdVerifier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimers(param0: Address): BrightIdFaucet__claimersResult {
    let result = super.call(
      "claimers",
      "claimers(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BrightIdFaucet__claimersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_claimers(
    param0: Address
  ): ethereum.CallResult<BrightIdFaucet__claimersResult> {
    let result = super.tryCall(
      "claimers",
      "claimers(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BrightIdFaucet__claimersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  firstPeriodStart(): BigInt {
    let result = super.call(
      "firstPeriodStart",
      "firstPeriodStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstPeriodStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstPeriodStart",
      "firstPeriodStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPeriod(): BigInt {
    let result = super.call(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPeriodIndividualPayout(_periodNumber: BigInt): BigInt {
    let result = super.call(
      "getPeriodIndividualPayout",
      "getPeriodIndividualPayout(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_periodNumber)]
    );

    return result[0].toBigInt();
  }

  try_getPeriodIndividualPayout(
    _periodNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPeriodIndividualPayout",
      "getPeriodIndividualPayout(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_periodNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumEthBalance(): BigInt {
    let result = super.call(
      "minimumEthBalance",
      "minimumEthBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumEthBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumEthBalance",
      "minimumEthBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  percentPerPeriod(): BigInt {
    let result = super.call(
      "percentPerPeriod",
      "percentPerPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_percentPerPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "percentPerPeriod",
      "percentPerPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodLength(): BigInt {
    let result = super.call("periodLength", "periodLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodLength", "periodLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periods(param0: BigInt): BrightIdFaucet__periodsResult {
    let result = super.call("periods", "periods(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new BrightIdFaucet__periodsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_periods(
    param0: BigInt
  ): ethereum.CallResult<BrightIdFaucet__periodsResult> {
    let result = super.tryCall(
      "periods",
      "periods(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BrightIdFaucet__periodsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapExchange(): Address {
    let result = super.call(
      "uniswapExchange",
      "uniswapExchange():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapExchange(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapExchange",
      "uniswapExchange():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _periodLength(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _percentPerPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _brightIdContext(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _brightIdVerifier(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _minimumEthBalance(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _uniswapExchange(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimAndOrRegisterCall extends ethereum.Call {
  get inputs(): ClaimAndOrRegisterCall__Inputs {
    return new ClaimAndOrRegisterCall__Inputs(this);
  }

  get outputs(): ClaimAndOrRegisterCall__Outputs {
    return new ClaimAndOrRegisterCall__Outputs(this);
  }
}

export class ClaimAndOrRegisterCall__Inputs {
  _call: ClaimAndOrRegisterCall;

  constructor(call: ClaimAndOrRegisterCall) {
    this._call = call;
  }

  get _brightIdContext(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _addrs(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ClaimAndOrRegisterCall__Outputs {
  _call: ClaimAndOrRegisterCall;

  constructor(call: ClaimAndOrRegisterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBrightIdSettingsCall extends ethereum.Call {
  get inputs(): SetBrightIdSettingsCall__Inputs {
    return new SetBrightIdSettingsCall__Inputs(this);
  }

  get outputs(): SetBrightIdSettingsCall__Outputs {
    return new SetBrightIdSettingsCall__Outputs(this);
  }
}

export class SetBrightIdSettingsCall__Inputs {
  _call: SetBrightIdSettingsCall;

  constructor(call: SetBrightIdSettingsCall) {
    this._call = call;
  }

  get _brightIdContext(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _brightIdVerifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetBrightIdSettingsCall__Outputs {
  _call: SetBrightIdSettingsCall;

  constructor(call: SetBrightIdSettingsCall) {
    this._call = call;
  }
}

export class SetMinimumEthBalanceCall extends ethereum.Call {
  get inputs(): SetMinimumEthBalanceCall__Inputs {
    return new SetMinimumEthBalanceCall__Inputs(this);
  }

  get outputs(): SetMinimumEthBalanceCall__Outputs {
    return new SetMinimumEthBalanceCall__Outputs(this);
  }
}

export class SetMinimumEthBalanceCall__Inputs {
  _call: SetMinimumEthBalanceCall;

  constructor(call: SetMinimumEthBalanceCall) {
    this._call = call;
  }

  get _minimumEthBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumEthBalanceCall__Outputs {
  _call: SetMinimumEthBalanceCall;

  constructor(call: SetMinimumEthBalanceCall) {
    this._call = call;
  }
}

export class SetPercentPerPeriodCall extends ethereum.Call {
  get inputs(): SetPercentPerPeriodCall__Inputs {
    return new SetPercentPerPeriodCall__Inputs(this);
  }

  get outputs(): SetPercentPerPeriodCall__Outputs {
    return new SetPercentPerPeriodCall__Outputs(this);
  }
}

export class SetPercentPerPeriodCall__Inputs {
  _call: SetPercentPerPeriodCall;

  constructor(call: SetPercentPerPeriodCall) {
    this._call = call;
  }

  get _percentPerPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPercentPerPeriodCall__Outputs {
  _call: SetPercentPerPeriodCall;

  constructor(call: SetPercentPerPeriodCall) {
    this._call = call;
  }
}

export class SetUniswapExchangeCall extends ethereum.Call {
  get inputs(): SetUniswapExchangeCall__Inputs {
    return new SetUniswapExchangeCall__Inputs(this);
  }

  get outputs(): SetUniswapExchangeCall__Outputs {
    return new SetUniswapExchangeCall__Outputs(this);
  }
}

export class SetUniswapExchangeCall__Inputs {
  _call: SetUniswapExchangeCall;

  constructor(call: SetUniswapExchangeCall) {
    this._call = call;
  }

  get _uniswapExchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniswapExchangeCall__Outputs {
  _call: SetUniswapExchangeCall;

  constructor(call: SetUniswapExchangeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
